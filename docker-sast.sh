#!  /usr/bin/env bash

# keep exit values after pipe: this makes it so the build step will correctly exit with error if one of the tests fails
set -o pipefail
shopt -s globstar
exit_code=0

# exit if arguments are empty
if [[ "$#" -eq 0 ]]; then
  printf "No arguments given \n"
  exit 0
fi

out_dir=$("pwd")/sast_output/
declare -a types
# Parse arguments
while :
do
  case "$1" in
  --help)
    echo "Usage:"
    echo "required arguments:"
    echo
    echo "--type: what sast tests to run. This argument can be added multiple times. (options: python, typescript)"
    echo "--target: the target to run on. SAST-scan will automatically run recursively on folders"
    echo
    echo "optional arguments:"
    echo
    echo "--help: print usage and exit"
    echo "--no_out_dir: disable creation of output directory"
    echo "--out_dir: location for output files (Default: \$pwd/sast_output)"
    echo "--no_shellcheck: disable shellcheck linter"
    echo "--no_yamllint: disable yamllint"
    echo "--no-jsonlint: disable jsonlint"
    echo
    echo "backend:"
    echo "--no_bandit: disable bandit scan"
    echo "--no_flake8: disable flake8 scan"
    echo
    echo "frontend:"
    echo "--no_tslint: disable tslint"
    exit 0
    ;;
  --type)
    types=( "${types[@]}" "$2" )
    shift 2
    ;;
  --target)
    target=$2
    shift 2
    ;;
  --no_out_dir)
    no_out_dir=true
    shift 1
    ;;
  --out_dir)
    out_dir=$2
    shift 2
    ;;
  --no-shellcheck)
    no_shellcheck=true
    shift 1
    ;;
  --no-jsonlint)
    no_jsonlint=true
    shift 1
    ;;
  --no-yamllint)
    no_yamllint=true
    shift 1
    ;;
  --no-flake8)
    no_flake8=true
    shift 1
    ;;
  --no-bandit)
    no_bandit=true
    shift 1
    ;;
  --no-tslint)
    no_tslint=true
    shift 1
    ;;
  -*)
    echo "Error: Unknown argument: $1" >&2
    echo "Use --help for possible arguments"
    exit 1
    ;;
  *)
    break
    ;;
  esac
done

# Check if target is set
[ -z "$target" ] && echo "target not set" && exit 1

# Execute recursively on folders
if [[ -d "$target" ]]; then
  recursive=true
elif [[  -f "$target" ]]; then
  recursive=false
fi

### Create test output directory ###
[[ $no_out_dir == true ]] || mkdir "$out_dir"

### Shell lint ###
[ -z "$no_shellcheck" ] && printf ">> shellcheck...\n" && find "$target" -name "*.sh" -exec shellcheck {} --shell=bash \; | ( [[ $no_out_dir == false ]] && tee -a "$out_dir"/output_shellcheck || cat ) || exit_code=1

### Yaml lint ###
[[ -z "$no_yamllint" ]] && printf ">> yamllint...\n"
if [[ $recursive == true || "${target: -5}" == ".yaml" ]]; then
  yamllint "$target" | ( [[ $no_out_dir == false ]] && tee -a "$out_dir"/output_shellcheck || cat ) || exit_code=1
fi
### jsonlint ###
[ -z "$no_jsonlint" ] && printf ">> jsonlint...\n" && find "$target" -name "*.json" -exec jsonlint {} -q \; | ( [[ $no_out_dir == false ]] && tee -a "$out_dir"/output_shellcheck || cat ) || exit_code=1

if [[ " ${types[*]} " =~ 'python' ]]; then
  ### Bandit check ###
  # installing bandit through pip3 instead of pip causes -q (quiet) to fail
  [ -z "$no_bandit" ] && printf ">> bandit...\n" && \
  if [[ $recursive == true ]]; then
    bandit -r -q -l "$target"/**/*.py;
  elif [ "${target: -3}" == ".py" ]; then
    bandit -q -l "$target";
  fi \
  | ( [[ $no_out_dir == false ]] && tee -a "$out_dir"/output_shellcheck || cat ) || exit_code=1

  ### Python lint ###
  [[ -z "$no_flake8" ]] && printf ">> flake8...\n"
  if [[ "$recursive" == true || "${target: -3}" == ".py" ]]; then
    flake8 --max-line-length=139 "$target" | ( [[ $no_out_dir == false ]] && tee -a "$out_dir"/output_shellcheck || cat ) || exit_code=1
  fi
fi

if [[ " ${types[*]} " =~ 'typescript' ]]; then
  ### typescript linter ###
  [ -z "$no_tslint" ] && printf ">> tslint...\n" &&\
   tslint --init &&\
    if [[ $recursive == true ]]; then
      tslint "$target"/**/*.ts
    elif [ "${target: -3}" == ".ts" ]; then
      tslint "$target"
    fi \
    | ( [[ $no_out_dir == false ]] && tee -a "$out_dir"/output_shellcheck || cat ) || exit_code=1

  # remove config file generated by tslint --init
  rm tslint.json
fi

exit $exit_code
